// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User { // Admin, Physician, Nurse, Assistant
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String      @unique
}

model Role { // Admin, Physician, Nurse, Assistant
  id       String @id @default(uuid())
  roleName String @unique
  users    User[]
}

model Profile {
    id String @id @default(uuid())
    user User?
    fname             String
    mname             String
    lname             String   
    nameSuffix        String?
    bdate             DateTime
    contactNumber     Int
    email             String?
    address    String
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    uniqueProfileId String?
}

model HealthcareProfessionalProfile {
    id String @id @default(uuid())
    licenseNumber String
    
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}




















// =================== TEST ===================
model UsersTest {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   RoleTest @relation(fields: [roleId], references: [id])
  roleId String

  profile   ProfileTest @relation(fields: [profileId], references: [id])
  profileId String      @unique

  appointments AppointmentTest[]
  insurances   InsuranceTest[]
}

model UserTest {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   RoleTest @relation(fields: [roleId], references: [id])
  roleId String

  profile   ProfileTest @relation(fields: [profileId], references: [id])
  profileId String      @unique

  appointments AppointmentTest[]
  insurances   InsuranceTest[]
}

model InsuranceTest {
  id            String   @id @default(uuid())
  insuranceName String
  user          UserTest @relation(fields: [userId], references: [id])
  userId        String   @unique
}

model ProfileTest {
  id                String    @id @default(uuid())
  user              UserTest?
  fname             String
  mname             String
  lname             String
  nameSuffix        String?
  bdate             DateTime
  age               Int
  contactNumber     Int
  email             String?
  currentAddress    String
  permanentAddress  String
  emergencyContact EmergenyContactTest[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model RoleTest {
  id        String   @id @default(uuid())
  roleName  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserTest[]
}

model AppointmentTest {
  id                String   @id @default(uuid())
  appointmentStatus String
  appointmentDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user   UserTest @relation(fields: [userId], references: [id])
  userId String   @unique
}

model EmergenyContactTest {
  id          String  @id @default(uuid())
  emergencyContactName         String
  emergencyContactRelationship String
  emergencyContactAddress      String
  emergencyContactPhoneNum     Int
  emergencyContactEmail        String?

  profile ProfileTest @relation(fields: [profileId], references: [id])
  profileId String
}



// model PersonalInformation {
//   id String   @id @default(uuid())
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   fname                 String
//   mname                 String
//   lname                 String
//   nameSuffix            String?
//   bdate                 DateTime
//   age                   Int
//   contactNumber         Int
//   email                 String?
//   currentAddress        String
//   permanentAddress      String
//   fathersName           String
//   fathersOccupation     String
//   fathersContactNum     String
//   mothersMaideName      String
//   mothersOccupation     String
//   mothersContactNum     String
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @updatedAt
// }

// model EmergenyContact {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   id          String  @id @default(uuid())
//   emergencyContactName         String
//   emergencyContactRelationship String
//   emergencyContactAddress      String
//   emergencyContactPhoneNum     Int
//   emergencyContactEmail        String?
// }

// model MedicalRecord {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   id String   @id @default(uuid())
//   height         Int
//   weight         Int
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model UserRole {
//   id     String @id @default(uuid())
//   role   Role   @relation(fields: [roleId], references: [id])
//   roleId String
//   user   User   @relation(fields: [userId], references: [id])
//   userId String
// }

// model RoleTest {
//   id       String @id @default(uuid())
//   roleName String @unique
//   users UserTest[]
//   user User @relation(fields: [userId], references: [id])
//   userId String @unique
//   userRoles UserRole[]
// }

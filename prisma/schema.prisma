generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Configuration {
  id        String   @id @default(nanoid(10))
  name      String
  logo      String
  loginBg   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String   @id @default(nanoid(4))
  roleName  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

enum Department {
  OPTHAL
  OBGYNE
  SURGERY
}

model User {
  id          String       @id @default(nanoid(8))
  isActive    Boolean      @default(true)
  username    String       @unique
  password    String
  userProfile UserProfile?
  role        Role?        @relation(fields: [roleId], references: [id])
  roleId      String?

  vitalsChecked Vitals[]
  diagnoses     Diagnosis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id                         String                      @id @default(nanoid(8))
  user                       User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String                      @unique
  fname                      String
  mname                      String
  lname                      String
  nameSuffix                 String?
  bdate                      DateTime
  contactNumber              String
  email                      String                      @unique
  address                    String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  healthcareProfessionalInfo HealthcareProfessionalInfo? @relation(fields: [healthcareProfessionalId], references: [id], onDelete: Cascade)
  healthcareProfessionalId   String?                     @unique
}

model HealthcareProfessionalInfo {
  id             String       @id @default(uuid())
  licenseNumber  String
  dateRegistered DateTime
  userProfile    UserProfile?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Patient {
  patientId        String         @id @default(nanoid(10))
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  patientProfileId String         @unique
  patientChart     PatientChart?  @relation(fields: [patientChartId], references: [id], onDelete: Cascade)
  patientChartId   String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  // patientInsurance Insurance      @relation(fields: [insuranceId], references: [id])
  // insuranceId      String
}

model PatientProfile {
  id                    String   @id @default(uuid())
  patient               Patient?
  fname                 String
  mname                 String
  lname                 String
  nameSuffix            String?
  age                   String
  gender                String // Male, Female
  bdate                 DateTime
  bplace                String
  civilStatus           String // Single, Married, Widowed, Separated
  occupation            String
  contactNumber         String
  email                 String?
  address               String
  alertMedication       String
  allergies             String // TODO: Create Allergies Table
  isSmoking             Boolean
  isCovidVaccinated     Boolean
  isDengvaxiaVaccinated Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model PatientChart {
  id        String      @id @default(uuid())
  patient   Patient?
  opdRecord OpdRecord[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OpdRecord {
  id             String        @id @default(uuid())
  patientChart   PatientChart? @relation(fields: [patientChartId], references: [id], onDelete: Cascade)
  patientChartId String?
  visits         Visit[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Visit {
  id             String     @id @default(uuid())
  opdRecord      OpdRecord? @relation(fields: [opdRecordId], references: [id])
  opdRecordId    String?
  accompaniedBy  String?
  chiefComplaint String
  hpi            String?

  vitals   Vitals @relation(fields: [vitalsId], references: [id])
  vitalsId String @unique

  diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id])
  diagnosisId String    @unique

  prescription String
  // prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  // prescriptionId String       @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Diagnosis {
  id String @id @default(uuid())

  physician   User?   @relation(fields: [physicianId], references: [id], onDelete: Cascade)
  physicianId String?

  physicalExamination String
  diagnosis           String
  treatment           String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  initialCheckUpId    String?
  followUpCheckUpId   String?

  Visit Visit?
}

model Vitals {
  id                       String   @id @default(uuid())
  nurse                    User     @relation(fields: [nurseId], references: [id], onDelete: Cascade)
  nurseId                  String
  heightInCm               Int
  weightInKl               Int
  bloodPressure            Int
  pulseRate                String
  respiratoryRate          String
  bodyTemperatureInCelsius Int
  oxygenSaturation         String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  Visit                    Visit?
}

// model Prescription {
//   id        String   @id @default(uuid())
//   medicine
//   dosage    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Visit     Visit?
// }

// enum DosageForm {
//   TABLET
//   CAPSULE
//   SYRUP
// }

// model Medicine {
//   id         String   @id @default(uuid())
//   name       String
//   dosageForm String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model Insurance {
//   id        String    @id @default(uuid())
//   Patient   Patient[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }
// model InitialCheckUp {
//   id             String     @id @default(uuid())
//   opdRecord      OpdRecord?
//   accompaniedBy  String
//   chiefComplaint String
//   vitalSigns     VitalSigns @relation(fields: [vitalSignsId], references: [id])
//   vitalSignsId   String     @unique
//   diagnosis      Diagnosis  @relation(fields: [diagnosisId], references: [id])
//   diagnosisId    String     @unique
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt
// }

// model FollowUpCheckUp {
//   id           String     @id @default(uuid())
//   opdRecord    OpdRecord? @relation(fields: [opdRecordId], references: [id])
//   opdRecordId  String?
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
//   vitalSigns   VitalSigns @relation(fields: [vitalSignsId], references: [id])
//   vitalSignsId String     @unique
//   diagnosis    Diagnosis  @relation(fields: [diagnosisId], references: [id])
//   diagnosisId  String     @unique
// }
// model LaboratoryProcedures {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model CovidVaccination {
//   id String @id @default(uuid())
// }

// model PregnancyInformation {
//   id             String  @id @default(uuid())
//   gravida        Int?
//   para           Int?
//   lmp            String?
//   termBirth      Int?
//   pretermBirth   Int?
//   miscarriages   Int?
//   livingChildren Int?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// // =================== TEST ===================
// model UsersTest {
//   id        String   @id @default(uuid())
//   isActive  Boolean  @default(true)
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   role   RoleTest @relation(fields: [roleId], references: [id])
//   roleId String

//   profile   ProfileTest @relation(fields: [profileId], references: [id])
//   profileId String      @unique

//   appointments AppointmentTest[]
//   insurances   InsuranceTest[]
// }

// model UserTest {
//   id        String   @id @default(uuid())
//   isActive  Boolean  @default(true)
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   role   RoleTest @relation(fields: [roleId], references: [id])
//   roleId String

//   profile   ProfileTest @relation(fields: [profileId], references: [id])
//   profileId String      @unique

//   appointments AppointmentTest[]
//   insurances   InsuranceTest[]
// }

// model InsuranceTest {
//   id            String   @id @default(uuid())
//   insuranceName String
//   user          UserTest @relation(fields: [userId], references: [id])
//   userId        String   @unique
// }

// model ProfileTest {
//   id                String    @id @default(uuid())
//   user              UserTest?
//   fname             String
//   mname             String
//   lname             String
//   nameSuffix        String?
//   bdate             DateTime
//   age               Int
//   contactNumber     Int
//   email             String?
//   currentAddress    String
//   permanentAddress  String
//   emergencyContact EmergenyContactTest[]
//   createdAt         DateTime  @default(now())
//   updatedAt         DateTime  @updatedAt
// }

// model RoleTest {
//   id        String   @id @default(uuid())
//   roleName  String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   users UserTest[]
// }

// model AppointmentTest {
//   id                String   @id @default(uuid())
//   appointmentStatus String
//   appointmentDate   DateTime
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt

//   user   UserTest @relation(fields: [userId], references: [id])
//   userId String   @unique
// }

// model EmergenyContactTest {
//   id          String  @id @default(uuid())
//   emergencyContactName         String
//   emergencyContactRelationship String
//   emergencyContactAddress      String
//   emergencyContactPhoneNum     Int
//   emergencyContactEmail        String?

//   profile ProfileTest @relation(fields: [profileId], references: [id])
//   profileId String
// }

// model PersonalInformation {
//   id String   @id @default(uuid())
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   fname                 String
//   mname                 String
//   lname                 String
//   nameSuffix            String?
//   bdate                 DateTime
//   age                   Int
//   contactNumber         Int
//   email                 String?
//   currentAddress        String
//   permanentAddress      String
//   fathersName           String
//   fathersOccupation     String
//   fathersContactNum     String
//   mothersMaideName      String
//   mothersOccupation     String
//   mothersContactNum     String
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @updatedAt
// }

// model EmergenyContact {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   id          String  @id @default(uuid())
//   emergencyContactName         String
//   emergencyContactRelationship String
//   emergencyContactAddress      String
//   emergencyContactPhoneNum     Int
//   emergencyContactEmail        String?
// }

// model MedicalRecord {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   id String   @id @default(uuid())
//   height         Int
//   weight         Int
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model UserRole {
//   id     String @id @default(uuid())
//   role   Role   @relation(fields: [roleId], references: [id])
//   roleId String
//   user   User   @relation(fields: [userId], references: [id])
//   userId String
// }

// model RoleTest {
//   id       String @id @default(uuid())
//   roleName String @unique
//   users UserTest[]
//   user User @relation(fields: [userId], references: [id])
//   userId String @unique
//   userRoles UserRole[]
// }
// model Role {
//   id       String @id @default(uuid())
//   roleName String @unique
//   users    User[]
// }

// model Department {
//   id        String   @id @default(uuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
